Java Examples



----> Java Type Casting


        ---- Widening Casting

        public class MyClass {
            public static void main(String[] args) {
                int myInt = 9;
                double myDouble = myInt; // Automatic casting: int to double

                System.out.println(myInt);                                          // Output: 9
                System.out.println(myDouble);                                        // Output: 9.0
            }
        }

        ---- Narrowing Casting

        public class MyClass {
            public static void main(String[] args) {
                double myDouble = 9.78;
                int myInt = (int) myDouble; // Explicit casting: double to int

                System.out.println(myDouble);                               // Output: 9.78
                System.out.println(myInt);                                  // Output: 9
            }
        }


----> Java Strings


        ---- Finding a string in a String

        public class MyClass {
            public static void main(String[] args) {
                String txt = "Please locate where 'locate' occurs!";
                System.out.println(txt.indexOf("locate")); 
            }
        }                                                                   // Output: 7


----> Java Switch


        ---- The Switch Statement
        
        public class MyClass {
            public static void main(String[] args) {
                int day = 4;
                switch (day) {
                    case 1:
                        System.out.println("Monday");
                        break;
                    case 2:
                        System.out.println("Tuesday");
                        break;
                    case 3:
                        System.out.println("Wednesday");
                        break;
                    case 4:
                        System.out.println("Thursday");
                        break;
                    case 5:
                        System.out.println("Friday");
                        break;
                    case 6:
                        System.out.println("Saturday");
                        break;
                    case 7:
                        System.out.println("Sunday");
                        break;
                }
            }
        }                                                               // Output: Thurdays


----> Java Arrays


        ---- Loop through a multidimensional array

        public class MyClass {
            public static void main(String[] args) {
                int[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} };
                
                for (int i = 0; i < myNumbers.length; ++i) {
                    for(int j = 0; j < myNumbers[i].length; ++j) {
                        System.out.println(myNumbers[i][j]);
                    }
                }
            }
        }                                            // Output: 1  2  3  4  5  6  7 (mas na vertical)



----> Java Methods


        ---- Method with multiple parameters

        public class MyClass {
            static void myMethod(String fname, int age) {
                System.out.println(fname + " is " + age);
            }

            public static void main(String[] args) {
                myMethod("Liam", 5);
                myMethod("Jenny", 8);
                myMethod("Anja", 31);
            }
        }                                               // Output: Liam is 5 \n  Jenny is 8 \n   Anja is 31



        ---- Method overloading

        public class MyClass {
            static int plusMethod(int x, int y) {
                return x + y;
            }
  
            static double plusMethod(double x, double y) {
                return x + y;
            }
  
            public static void main(String[] args) {
                int myNum1 = plusMethod(8, 5);
                double myNum2 = plusMethod(4.3, 6.26);
                System.out.println("int: " + myNum1);
                System.out.println("double: " + myNum2);
            }
        }


        ---- Recursion

        public class MyClass {
            public static void main(String[] args) {
                int result = sum(10);
                System.out.println(result);
            }

            public static int sum(int k) {
                if (k > 0) {
                    return k + sum(k - 1);
                } else {
                    return 0;
                }
            }
        }                                               // Output: 55



        ---- Recursive function with a alting condition

        public class MyClass {
            public static void main(String[] args) {
                int result = sum(5, 10);
                System.out.println(result);
            }
  
            public static int sum(int start, int end) {
                if (end > start) {
                    return end + sum(start, end - 1);
                } else {
                    return end;
                }
            }
        }

----> Java Classes and Objects


        ---- Constructor with parameters

        public class Car {
            int modelYear;        //VARIÁVEIS DE INSTÂNCIA!
            String modelName;

            public Car(int year, String name) {              //CONSTRUTOR - método da classe
                modelYear = year;                  
                modelName = name;
            }

            public static void main(String[] args) {
                Car myCar = new Car(1969, "Mustang");       // INSTANCIAÇÃO DE UMA CLASSE == OBJETO!
                System.out.println(myCar.modelYear + " " + myCar.modelName);
            }
        }                       //Output: 1969 Mustang



----> Java Modifiers


        ---- Abstract Class with abstract Methods


        // abstract class
        abstract class Person {
            public String fname = "John";
            public String lname = "Doe";
            public String email = "john@doe.com";
            public int age = 24;
            public abstract void study(); // abstract method 
        }

        // Subclass (inherit from Person)
        class Student extends Person {
            public int graduationYear = 2018;
            public void study() {
                System.out.println("Studying all day long");
            }
        }

        ______________________________________________


        class MyClass {
            public static void main(String[] args) {
            
                // create an object of the Student class (which inherits attributes and methods from Person)
                Student myObj = new Student(); 
    
                System.out.println("Name: " + myObj.fname + " " + myObj.lname);
                System.out.println("Email: " + myObj.email);
                System.out.println("Age: " + myObj.age);
                System.out.println("Graduation Year: " + myObj.graduationYear);
    
                myObj.study(); // call abstract method *
            }
        }                                               * "Studying all day long"




----> Java Encapsulation

        public class Person {
            private String name;

            // Getter
            public String getName() {
            return name;
            }

            // Setter
            public void setName(String newName) {
            this.name = newName;
            }
        }

        ______________________________________________

        public class MyClass {
            public static void main(String[ ] args) {
                Person myObj = new Person();
                myObj.setName("John");
                System.out.println(myObj.getName());
            }
        }                                               //Output: John





----> Sorting Algorithms in Java


        ---- Bubble Sort
    
    Explanation

    Bubble sort works by swapping adjacent elements if they're not in the desired order. 
    This process repeats from the beginning of the array until all elements are in order.
    We know that all elements are in order when we manage to do the whole iteration without 
    swapping at all - then all elements we compared were in the desired order with their adjacent 
    elements, and by extension, the whole array. 
    

    Here are the steps for sorting an array of numbers from least to greatest:

    4 2 1 5 3: The first two elements are in the wrong order, so we swap them.

    2 4 1 5 3: The second two elements are in the wrong order too, so we swap.

    2 1 4 5 3: These two are in the right order, 4 < 5, so we leave them alone.

    2 1 4 5 3: Another swap.

    2 1 4 3 5: Here's the resulting array after one iteration.


    Because at least one swap occurred during the first pass (there were actually three), 
    we need to go through the whole array again and repeat the same process.

    By repeating this process, until no more swaps are made, we'll have a sorted array.

    The reason this algorithm is called Bubble Sort is because the numbers kind of "bubble up" 
    to the "surface." If you go through our example again, following a particular number (4 is a great 
    example), you'll see it slowly moving to the right during the process.

            --- Implementation:

            public static void bubbleSort(int[] a) {
                boolean sorted = false;
                int temp;
                while(!sorted) {
                    sorted = true;
                    for (int i = 0; i < array.length - 1; i++) {
                        if (a[i] > a[i+1]) {
                            temp = a[i];
                            a[i] = a[i+1];
                            a[i+1] = temp;
                            sorted = false;
                        }
                    }
                }
            }
    

    When using this algorithm we have to be careful how we state our swap condition.

    For example, if I had used a[i] >= a[i+1] it could have ended up with an infinite 
    loop, because for equal elements this relation would always be true, and hence always swap them.



        ---- Insertion Sort

    Explanation

    The idea behind Insertion Sort is dividing the array into the sorted and unsorted subarrays.

    The sorted part is of length 1 at the beginning and is corresponding to the first (left-most) 
    element in the array. We iterate through the array and during each iteration, we expand the sorted 
    portion of the array by one element.

    Upon expanding, we place the new element into its proper place within the sorted subarray. We do this 
    by shifting all of the elements to the right until we encounter the first element we don't have to shift.

    For example, if in the following array the bolded part is sorted in an ascending order, the following happens:

    3 5 7 8 4 2 1 9 6: We take 4 and remember that that's what we need to insert. Since 8 > 4, we shift.

    3 5 7 x 8 2 1 9 6: Where the value of x is not of crucial importance, since it will be overwritten 
            immediately (either by 4 if it's its appropriate place or by 7 if we shift). Since 7 > 4, we shift.

    3 5 x 7 8 2 1 9 6

    3 x 5 7 8 2 1 9 6

    3 4 5 7 8 2 1 9 6

    After this process, the sorted portion was expanded by one element, we now have five rather than four elements. 
    Each iteration does this and by the end we'll have the whole array sorted.

            --- Implementation:

            public static void insertionSort(int[] array) {
                for (int i = 1; i < array.length; i++) {
                    int current = array[i];
                    int j = i - 1;
                    while(j >= 0 && current < array[j]) {
                        array[j+1] = array[j];
                        j--;
                    }
                    // at this point we've exited, so j is either -1
                    // or it's at the first element where current >= a[j]
                array[j+1] = current;
                }
            }




        ---- Merge Sort

    Explanation:

    Merge Sort uses recursion to solve the problem of sorting more efficiently than algorithms 
    previously presented, and in particular it uses a divide and conquer approach.

    Using both of these concepts, we'll break the whole array down into two subarrays and then:

    Sort the left half of the array (recursively)
    Sort the right half of the array (recursively)
    Merge the solutions

    This tree is meant to represent how the recursive calls work. The arrays marked with the down arrow 
    are the ones we call the function for, while we're merging the up arrow ones going back up. So you 
    follow the down arrow to the bottom of the tree, and then go back up and merge.

    In our example, we have the array 3 5 3 2 1, so we divide it into 3 5 4 and 2 1. To sort them, we 
    further divide them into their components. Once we've reached the bottom, we start merging up and 
    sorting them as we go.



    Implementation:

    The core function works pretty much as laid out in the explanation. We're just passing indexes 
    left and right which are indexes of the left-most and right-most element of the subarray we want 
    to sort. Initially, these should be 0 and array.length-1, depending on implementation.

    The base of our recursion ensures we exit when we've finished, or when right and left meet each other. 
    We find a midpoint mid, and sort subarrays left and right of it recursively, ultimately merging our solutions.

    If you remember our tree graphic, you might wonder why don't we create two new smaller arrays and pass 
    them on instead. This is because on really long arrays, this would cause huge memory consumption for 
    something that's essentially unnecessary.

    Merge Sort already doesn't work in-place because of the merge step, and this would only serve to worsen 
    its memory efficiency. The logic of our tree of recursion otherwise stays the same, though, we just have 
    to follow the indexes we're using:


                public static void mergeSort(int[] array, int left, int right) {
                    if (right <= left) return;
                    int mid = (left+right)/2;
                    mergeSort(array, left, mid);
                    mergeSort(array, mid+1, right);
                    merge(array, left, mid, right);
                }

    To merge the sorted subarrays into one, we'll need to calculate the length of each and make temporary 
    arrays to copy them into, so we could freely change our main array.

    After copying, we go through the resulting array and assign it the current minimum. Because our subarrays 
    are sorted, we just chose the lesser of the two elements that haven't been chosen so far, and move the 
    iterator for that subarray forward:

                void merge(int[] array, int left, int mid, int right) {
                        // calculating lengths
                    int lengthLeft = mid - left + 1;
                    int lengthRight = right - mid;

                        // creating temporary subarrays
                    int leftArray[] = new int [lengthLeft];
                    int rightArray[] = new int [lengthRight];

                        // copying our sorted subarrays into temporaries
                    for (int i = 0; i < lengthLeft; i++)
                        leftArray[i] = array[left+i];
                    for (int i = 0; i < lengthRight; i++)
                        rightArray[i] = array[mid+i+1];

                        // iterators containing current index of temp subarrays
                    int leftIndex = 0;
                    int rightIndex = 0;

                        // copying from leftArray and rightArray back into array
                    for (int i = left; i < right + 1; i++) {
                        // if there are still uncopied elements in R and L, copy minimum of the two
                        if (leftIndex < lengthLeft && rightIndex < lengthRight) {
                            if (leftArray[leftIndex] < rightArray[rightIndex]) {
                                array[i] = leftArray[leftIndex];
                                leftIndex++;
                            }
                                else {
                                    array[i] = rightArray[rightIndex];
                                    rightIndex++;
                                }
                        }
        
                        // if all the elements have been copied from rightArray, copy the rest of leftArray
        
                            else if (leftIndex < lengthLeft) {
                                array[i] = leftArray[leftIndex];
                                leftIndex++;
                            }
                        // if all the elements have been copied from leftArray, copy the rest of rightArray
                            else if (rightIndex < lengthRight) {
                                array[i] = rightArray[rightIndex];
                                rightIndex++;
                            }
                        }
                    }




            --- Quicksort

        Explanation:

    Quicksort is another Divide and Conquer algorithm. It picks one element of an array as the pivot and sorts 
    all of the other elements around it, for example smaller elements to the left, and larger to the right.

    This guarantees that the pivot is in its proper place after the process. Then the algorithm recursively 
    does the same for the left and right portions of the array.


        Implementation:

                    static int partition(int[] array, int begin, int end) {
                        int pivot = end;

                        int counter = begin;
                        for (int i = begin; i < end; i++) {
                            if (array[i] < array[pivot]) {
                                int temp = array[counter];
                                array[counter] = array[i];
                                array[i] = temp;
                                counter++;
                            }
                        }
    
                        int temp = array[pivot];
                        array[pivot] = array[counter];
                        array[counter] = temp;

                        return counter;
                    }

                    public static void quickSort(int[] array, int begin, int end) {
                        if (end <= begin) return;
                        int pivot = partition(array, begin, end);
                        quickSort(array, begin, pivot-1);
                        quickSort(array, pivot+1, end);
                    }



        Sorting in Java - Comparable Interface:

        
    If you have your own types, it may get cumbersome implementing a separate sorting algorithm for each one. 
    That's why Java provides an interface allowing you to use Collections.sort() on your own classes.

    To do this, your class must implement the Comparable<T> interface, where T is your type, and override a 
    method called .compareTo().

    This method returns a negative integer if this is smaller than the argument element, 0 if they're equal, 
    and a positive integer if this is greater.

    In our example, we've made a class Student, and each student is identified by an id and a year they started 
    their studies.

    We want to sort them primarily by generations, but also secondarily by IDs:

                public static class Student implements Comparable<Student> {
                    int studentId;
                    int studentGeneration;

                    public Student(int studentId, int studentGeneration) {
                        this.studentId = studentId;
                        this.studentGeneration = studentGeneration;
                    }

                    @Override
                    public String toString() {
                        return studentId + "/" + studentGeneration % 100;
                    }

                    @Override
                    public int compareTo(Student student) {
                        int result = this.studentGeneration - student.studentGeneration;
                        if (result != 0) {
                            return result;
                        } else {
                            return this.studentId - student.studentId;
                        }
        
            
                    }
                }

    
    And here's how to use it in an application:

                public static void main(String[] args) {
                    Student[] a = new SortingAlgorithms.Student[5];
                    a[0] = new Student(75, 2016);
                    a[1] = new Student(52, 2019);
                    a[2] = new Student(57, 2016);
                    a[3] = new Student(220, 2014);
                    a[4] = new Student(16, 2018);

                    Arrays.sort(a);

                    System.out.println(Arrays.toString(a));
                }

        
        
        Sorting in Java - Comparator Interface:

    
    We might want to sort our objects in an unorthodox way for a specific purpose, but we don't want to 
    implement that as the default behavior of our class, or we might be sorting a collection of an built-in 
    type in a non-default way.

    For this, we can use the Comparator interface. For example, let's take our Student class, and sort only 
    by ID:

                public static class SortByID implements Comparator<Student> {
                    public int compare(Student a, Student b) {
                    return a.studentId - b.studentId;
                    }
                }

    If we replace the sort call in main with the following:

                Arrays.sort(a, new SortByID());





    -----> How to Split a String in Java

    
    The split() Method (Without a Limit)

    This method takes one String parameter, in regular expression (regex) format. This method splits the 
    string around the matches of the given regular expression.

    
    The syntax for this method is:

    String[] split(String regex, int limit)


    Where the regex parameter represents the delimiter, i.e. based on what we'll split our string. Keep 
    in mind that this parameter doesn't need to be anything complicated, Java simply provides the option of 
    using regular expressions.

    
    For example, let's see how we can split this String into two separate names:

    String myString = "Jane-Doe";
    String[] splitString = myString.split("-");


    We can simply use a character/substring instead of an actual regular expression. Of course, there are 
    certain special characters in regex which we need to keep in mind, and escape them in case we want their 
    literal value.

    Once the string is split, the result is returned as an array of Strings. Strings in the returned array 
    appear in the same order as in the original string.

    The results are packed in the String array. To retrieve the separate names, we can access each element:

    System.out.println(splitString[0]);
    System.out.println(splitString[1]);

    This results in:

    Jane
    Doe


    Keep in mind, this method will split the string on all occurrences of the delimiter. For example, we can 
    have a CSV formatted input:

    String myString = "Jane,21,Employed,Software Engineer";
    String[] splitString = myString.split(",");

    for (String s : splitString) {
        System.out.println(s);
    }

    
    This results in:

    Jane
    21
    Employed
    Software Engineer





        -----> Binary Search in Java


    Introduction:

    From picking your cherished pair of jeans from your wardrobe to choosing the next movie to watch with 
    your partner, human life is filled with searching for things.

    While in day-to-day life, humans usually search between a few, if not a dozen, items. Computers have to 
    deal with searching through data of comparatively massive amounts in terms of their size and quantity.

    This warrants a computer's need to have an efficient method to search inside its arrays and collections as 
    efficiently as possible.

    Being able to find information amidst a collection is one of the most basic functional points of an 
    application.


    Binary Search (sometimes known as Logarithmic Search) is a widely popular algorithm to search a sorted 
    array for the position of a given element.

    It works on a divide and conquer basis by comparing the target element with the middle element of the array. 
    In case a match is found - its position is returned, otherwise if the target element is smaller than the 
    middle element, it can't be on the right side of the middle element.

    Therefore, the right half of the array (including middle element) is discarded and the search is continued 
    on the left half using the same approach.

    Similarly in case the target element is larger than the middle element, it cannot be on a place preceding 
    the middle of the array. Therefore, the left half of the array is discarded and the search is continued 
    on the right half.

    We can make this assumption simply because we know that the array is sorted beforehand. If it weren't 
    sorted, we couldn't implement Binary Search.

    
        Implementation:

    Since we have a repeating step (checking for the middle element and discarding one half of the array), 
    we can implement the algorithm using two approaches - an iterative approach and a recursive approach.

    As usual, there's no clear winner between these two and you can choose to use any one of these based 
    on your personal preference.

    -Iterative-
    
    Let's start off with the iterative implementation:

                public static int iterativeSearch(int[] arrayToSearch, int element) {
                    int lowIndex = 0;
                    int highIndex = arrayToSearch.length-1;

                    // Holds the position in array for given element
                    // Initial negative integer set to be returned if no match was found on array
                    int elementPos = -1;

                    // If lowIndex less than highIndex, there's still elements in the array
                    while (lowIndex <= highIndex) {
                        int midIndex = (lowIndex + highIndex) / 2;
                        if (element == arrayToSearch[midIndex]) {
                            elementPos = midIndex;
                            break;
                        } else if (element < arrayToSearch[midIndex]) {
                            highIndex = midIndex-1;
                        } else if (element > arrayToSearch[midIndex]) {
                            lowIndex = midIndex+1;
                        }
                    }
                    return elementPos;
                }

    We need to keep track of the lowIndex (the first index) and the highIndex (last index) to get the 
    arithmetic middle for the array. The elementPos by default is -1 which signifies that the element 
    hasn't been found.

    If it hasn't, we simply return this position. If it has, we adjust the elementPos to reflect the 
    location in the array.

    Then, through a while loop, we check if the middle element is the one we're searching for. If not, 
    we adjust the lowIndex and highIndex to disregard the half of the array that the target element isn't in.

        -Recursive-

    The recursive implementation is fairly straightforward too, but we simply call the method recursively 
    until the element has been found:

                
                
                public static int recursiveSearch(int[] arrayToSearch, int element) {
                    return recursiveSearch(arrayToSearch, element, 0, arrayToSearch.length-1);
                }

                private static int recursiveSearch(int[] arrayToSearch, int element, int lowIndex, int highIndex) {
                    // If lowIndex surpasses highIndex, the element has not been found
                    if (lowIndex > highIndex) return -1;

                    // Default assumption is that the element is not found
                    int elementPos = -1;

                    int midIndex = (lowIndex + highIndex) / 2;

                    if (element == arrayToSearch[midIndex]) {
                        elementPos = midIndex;
                    } else if (element < arrayToSearch[midIndex]) {
                        recursiveSearch(arrayToSearch, element, lowIndex, midIndex-1);
                    } else if (element > arrayToSearch[midIndex]) {
                        recursiveSearch(arrayToSearch, element, midIndex+1, highIndex);
                    }
                    return elementPos;
                }




        -----> Maximum contiguous sum 


        import java.io.*; 
        // Java program to print largest contiguous array sum 
        import java.util.*; 
  
        class Kadane { 
            public static void main (String[] args) { 
        
                int [] a = {-2, -3, 4, -1, -2, 1, 5, -3}; 
                System.out.println("Maximum contiguous sum is " + maxSubArraySum(a)); 
            } 
  
            static int maxSubArraySum(int a[]) { 
                int size = a.length; 
                int max_so_far = Integer.MIN_VALUE, max_ending_here = 0; 
  
                for (int i = 0; i < size; i++) { 
                    max_ending_here = max_ending_here + a[i]; 
                    if (max_so_far < max_ending_here) 
                        max_so_far = max_ending_here; 
                    if (max_ending_here < 0) 
                        max_ending_here = 0; 
                } 
                return max_so_far; 
            } 
        } 





getClosest METHOD (BinarySearch Ind):


        public static int findClosest(int a[], int key) {
        int tamanhoArray = a.length;

        if (key <= a[0])
            return a[0];
        if (key >= a[tamanhoArray - 1])
            return a[tamanhoArray - 1];

        // binary search
        int i = 0;
        int j = tamanhoArray;
        int middle = 0;

        while (i < j) {
            middle = (i + j) / 2;

            if (a[middle] == key) {

                return a[middle];

            }

            if (key <= a[middle]) {

                if (middle > 0 && key > a[middle - 1]) {
                    System.out.println(getClosest(a[middle - 1], a[middle], key));
                    return getClosest(a[middle - 1], a[middle], key);

                }

                j = middle;
            }

            if (key >= a[middle]) {
                if (middle < tamanhoArray - 1 && key < a[middle + 1]) {
                    System.out.println(getClosest(a[middle], a[middle + 1], key));
                    return getClosest(a[middle], a[middle + 1], key);

                }

                i = middle + 1;
            }
        }

        return a[middle];
    }

    public static int getClosest(int limiteInferior, int limiteSuperior, int key) {
        if (key - limiteInferior >= limiteSuperior - key) {

            return limiteSuperior;

        }

        else {

            return limiteInferior;

        }

    }


